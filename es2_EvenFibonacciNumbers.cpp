// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

#include <iostream>

using namespace std;

// Passaggio di parametri per indirizzo
void sumEvenFibonacciUpToInd(int limit, int* sum){
    int first = 1;
    int second = 2;
    *sum = second;

    while(first + second < limit){
        int new_fibonacci = first + second;
        if(new_fibonacci % 2 == 0)
            *sum += new_fibonacci;
        first = second;
        second = new_fibonacci;
    }
}

// Passaggio di parametri per riferimento
void sumEvenFibonacciUpToRef(int limit, int &sum){
    int first = 1;
    int second = 2;
    sum = second;

    while(first + second < limit){
        int new_fibonacci = first + second;
        if(new_fibonacci % 2 == 0)
            sum += new_fibonacci;
        first = second;
        second = new_fibonacci;
    }

}

int sumEvenFibonacciUpTo(int limit){
    int first = 1;
    int second = 2;
    int sum_even = second;

    while(first + second < limit){
        int new_fibonacci = first + second;
        if(new_fibonacci % 2 == 0)
            sum_even += new_fibonacci;
        first = second;
        second = new_fibonacci;
    }
    return sum_even;
}


int main(){
    int max = 4000000;
    int res = sumEvenFibonacciUpTo(max);
    cout << res << endl;

    int resInd = 0;
    sumEvenFibonacciUpToInd(max, &resInd);      
    cout << resInd << endl;

    int resRef = 0;
    sumEvenFibonacciUpToRef(max, resRef);
    cout << resRef << endl;

    return 0;
}

